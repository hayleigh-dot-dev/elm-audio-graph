[{"name":"AudioGraph","comment":" Info about the library.\n\n\n# Definition\n\n@docs AudioGraph, emptyAudioGraph\n\n\n# Types\n\n@docs Node, NodeType, Param, Connection\n\n\n# Graph Manipulations\n\n@docs addNode, getNode, removeNode, addConnection, removeConnection\n\n\n# Node Constructors\n\n@docs createOscillatorNode, createGainNode, createCustomNode\n\n\n# Node Methods\n\n@docs getNodeID, getNodeType, getNodeParam, setNodeParam\n\n","unions":[{"name":"AudioGraph","comment":" An `AudioGraph` represents the structure of a Web Audio processing\ngraph. It is very similar to the Graph Object Model available in the\n[Soundstage][https://github.com/soundio/soundstage] javascript package.\n\nA dictionary of [`Node`](#Node)s stores all the currently registered graph\nnodes (more on those later), and a separate list tracks how Nodes are connected\nto one another.\n\nTypically you won't need to create more than one AudioGraph.\n\n","args":[],"cases":[["AudioGraph",["{ nodes : Dict.Dict String.String AudioGraph.Node, connections : List.List AudioGraph.Connection }"]]]},{"name":"Node","comment":" `Node` represents a generic audio node.\n","args":[],"cases":[["Node",["{ id : AudioGraph.NodeID.NodeID, nodeType : AudioGraph.NodeType, numInputs : Basics.Int, numOutputs : Basics.Int, params : Dict.Dict String.String AudioGraph.Param }"]]]},{"name":"NodeType","comment":" Based on a Nodes params, we can give it a type. This package has built\nin types for the most common Web Audio nodes, but the `Custom` type allows\nyou to [build your own nodes](#createCustomNode).\n","args":[],"cases":[["Output",[]],["Oscillator",[]],["Gain",[]],["Custom",["String.String"]]]},{"name":"Param","comment":" ","args":[],"cases":[["Value",["Basics.Float"]],["Note",["Basics.Int"]],["Frequency",["Basics.Float"]],["Waveform",["String.String"]]]}],"aliases":[{"name":"Connection","comment":" ","args":[],"type":"( AudioGraph.NodeID.NodeID, AudioGraph.NodeID.NodeID, String.String )"}],"values":[{"name":"addConnection","comment":" ","type":"Maybe.Maybe AudioGraph.Node -> Maybe.Maybe AudioGraph.Node -> String.String -> AudioGraph.AudioGraph -> AudioGraph.AudioGraph"},{"name":"addNode","comment":" ","type":"AudioGraph.Node -> AudioGraph.AudioGraph -> AudioGraph.AudioGraph"},{"name":"createCustomNode","comment":" You can create your own custom nodes with `createCustomNode` by simply\nproviding a String to name your new node type, and a dictionary of its default\nparameters. Finally, passing a NodeID as usual will construct the new custom\nnode.\n\nYou can then partially apply `createCustomNode` to create your own node generators:\n\n\n    createMyAwesomeNode : NodeID -> Node\n    createMyAwesomeNode id =\n        createCustomNode\n            \"MyAwesomeNode\"\n            0\n            1\n            (Dict.fromList [ ( \"awesomeness\", Value 100.0 ) ])\n            id\n\n\n","type":"String.String -> Basics.Int -> Basics.Int -> Dict.Dict String.String AudioGraph.Param -> AudioGraph.NodeID.NodeID -> AudioGraph.Node"},{"name":"createGainNode","comment":" ","type":"AudioGraph.NodeID.NodeID -> AudioGraph.Node"},{"name":"createOscillatorNode","comment":" ","type":"AudioGraph.NodeID.NodeID -> AudioGraph.Node"},{"name":"emptyAudioGraph","comment":" To construct an Audio Graph, start with the `emptyAudioGraph` which has no\ntracked connections and a singular `Output` node. The Output node represents\nthe Web Audio context _destination_ and has a pre-defined `NodeID` of \"\\_output\".\n\n    type alias Model =\n        AudioGraph\n\n    init : Model\n    init =\n        emptyAudioGraph\n\n","type":"AudioGraph.AudioGraph"},{"name":"getNode","comment":" ","type":"AudioGraph.AudioGraph -> AudioGraph.NodeID.NodeID -> Maybe.Maybe AudioGraph.Node"},{"name":"getNodeID","comment":" ","type":"AudioGraph.Node -> AudioGraph.NodeID.NodeID"},{"name":"getNodeParam","comment":" ","type":"String.String -> AudioGraph.Node -> Maybe.Maybe AudioGraph.Param"},{"name":"getNodeType","comment":" ","type":"AudioGraph.Node -> AudioGraph.NodeType"},{"name":"removeConnection","comment":" ","type":"AudioGraph.Connection -> AudioGraph.AudioGraph -> AudioGraph.AudioGraph"},{"name":"removeNode","comment":" ","type":"AudioGraph.AudioGraph -> AudioGraph.NodeID.NodeID -> AudioGraph.AudioGraph"},{"name":"setNodeParam","comment":" ","type":"String.String -> AudioGraph.Param -> AudioGraph.Node -> AudioGraph.Node"}],"binops":[]},{"name":"AudioGraph.Encode","comment":"\n\n@docs encodeAudioGraph, encodeNode\n\n","unions":[],"aliases":[],"values":[{"name":"encodeAudioGraph","comment":"\n","type":"AudioGraph.AudioGraph -> Json.Encode.Value"},{"name":"encodeNode","comment":"\n","type":"AudioGraph.Node -> Json.Encode.Value"}],"binops":[]},{"name":"AudioGraph.NodeID","comment":"\n\n@docs NodeID\n\n@docs fromString, fromInt\n\n@docs toString\n\n","unions":[{"name":"NodeID","comment":"\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"fromInt","comment":"\n","type":"Basics.Int -> AudioGraph.NodeID.NodeID"},{"name":"fromString","comment":"\n","type":"String.String -> AudioGraph.NodeID.NodeID"},{"name":"toString","comment":"\n","type":"AudioGraph.NodeID.NodeID -> String.String"}],"binops":[]},{"name":"AudioGraph.Utils","comment":"\n\n@docs mtof, ftom\n\n@docs mtof_, ftom_\n\n","unions":[],"aliases":[],"values":[{"name":"ftom","comment":"\n","type":"AudioGraph.Param -> AudioGraph.Param"},{"name":"ftom_","comment":"\n","type":"Basics.Float -> Basics.Int"},{"name":"mtof","comment":"\n","type":"AudioGraph.Param -> AudioGraph.Param"},{"name":"mtof_","comment":"\n","type":"Basics.Int -> Basics.Float"}],"binops":[]}]