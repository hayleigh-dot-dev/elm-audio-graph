[{"name":"AudioGraph","comment":" Info about the library.\n\n\n# Definition\n\n@docs AudioGraph, emptyAudioGraph\n\n\n# Types\n\n@docs Connection, connectionFrom\n\n\n# Graph Manipulations\n\n@docs addNode, getNode, removeNode, addConnection, removeConnection\n\n","unions":[{"name":"AudioGraph","comment":" An `AudioGraph` represents the structure of a Web Audio processing\ngraph. It is very similar to the Graph Object Model available in the\n[Soundstage][https://github.com/soundio/soundstage] javascript package.\n\nA dictionary of [`Node`](#Node)s stores all the currently registered graph\nnodes (more on those later), and a separate list tracks how Nodes are connected\nto one another.\n\nTypically you won't need to create more than one AudioGraph.\n\n","args":[],"cases":[["AudioGraph",["{ nodes : Dict.Dict String.String AudioGraph.Node.Node, connections : List.List AudioGraph.Connection }"]]]}],"aliases":[{"name":"Connection","comment":" ","args":[],"type":"( ( AudioGraph.Node.ID, String.String ), ( AudioGraph.Node.ID, String.String ) )"}],"values":[{"name":"addConnection","comment":" ","type":"AudioGraph.Connection -> AudioGraph.AudioGraph -> AudioGraph.AudioGraph"},{"name":"addNode","comment":" Insert a new node into the audio graph. Returns a new audio graph with the\nadded node.\n\nNote: This will replace an existing node of the same Node.ID.\n","type":"AudioGraph.Node.Node -> AudioGraph.AudioGraph -> AudioGraph.AudioGraph"},{"name":"connectionFrom","comment":" ","type":"AudioGraph.Node.ID -> String.String -> AudioGraph.Node.ID -> String.String -> AudioGraph.Connection"},{"name":"emptyAudioGraph","comment":" To construct an Audio Graph, start with the `emptyAudioGraph` which has no\ntracked connections and a singular `Output` node. The Output node represents\nthe Web Audio context _destination_ and has a pre-defined `Node.ID` of \"\\_output\".\n\n    type alias Model =\n        AudioGraph\n\n    init : Model\n    init =\n        emptyAudioGraph\n\n","type":"AudioGraph.AudioGraph"},{"name":"getNode","comment":" Look up a node in the audio graph by Node.ID. Returns `Just Node` if found or\n`Nothing` if not.\n","type":"AudioGraph.Node.ID -> AudioGraph.AudioGraph -> Maybe.Maybe AudioGraph.Node.Node"},{"name":"removeConnection","comment":" ","type":"AudioGraph.Connection -> AudioGraph.AudioGraph -> AudioGraph.AudioGraph"},{"name":"removeNode","comment":" Remove a node from the audio graph. This is a NoOp if no node with the supplied\nNode.ID exists in the graph. Returns a new audio graph with the matching node \nremoved.\n","type":"AudioGraph.Node.ID -> AudioGraph.AudioGraph -> AudioGraph.AudioGraph"}],"binops":[]},{"name":"AudioGraph.Encode","comment":"\n\n@docs encodeAudioGraph, encodeNode\n\n","unions":[],"aliases":[],"values":[{"name":"encodeAudioGraph","comment":" ","type":"AudioGraph.AudioGraph -> Json.Encode.Value"},{"name":"encodeNode","comment":" ","type":"AudioGraph.Node.Node -> Json.Encode.Value"}],"binops":[]},{"name":"AudioGraph.Node","comment":"\n\n# Definition\n\n@docs Node\n\n\n# Types\n\n@docs ID, idFromString, idFromInt, idToString, Type, Param\n\n\n# Node Methods\n\n@docs getID, getType, getParam, setParam\n\n\n# Node Constructors\n\n@docs desintationNode, createOscillatorNode, createGainNode, createCustomNode\n\n","unions":[{"name":"ID","comment":" ","args":[],"cases":[]},{"name":"Node","comment":" `Node` represents a generic audio node.\n","args":[],"cases":[["Node",["{ id : AudioGraph.Node.ID, nodeType : AudioGraph.Node.Type, params : Dict.Dict String.String AudioGraph.Node.Param }"]]]},{"name":"Param","comment":" ","args":[],"cases":[["Value",["AudioGraph.Units.KValue"]],["Note",["AudioGraph.Units.MIDI"]],["Frequency",["AudioGraph.Units.Hertz"]],["Waveform",["String.String"]],["Input",["AudioGraph.Units.ChannelNumber"]],["Output",["AudioGraph.Units.ChannelNumber"]]]},{"name":"Type","comment":" Based on a Nodes params, we can give it a type. This package has built\nin types for the most common Web Audio nodes, but the `Custom` type allows\nyou to [build your own nodes](#createCustomNode).\n","args":[],"cases":[["Destination",[]],["Oscillator",[]],["Gain",[]],["Custom",["String.String"]]]}],"aliases":[],"values":[{"name":"createCustomNode","comment":" You can create your own custom nodes with `createCustomNode` by simply\nproviding a String to name your new node type, and a dictionary of its default\nparameters. Finally, passing a ID as usual will construct the new custom\nnode.\n\nYou can then partially apply `createCustomNode` to create your own node generators:\n\n    createMyAwesomeNode : ID -> Node\n    createMyAwesomeNode id =\n        createCustomNode\n            \"MyAwesomeNode\" -- Type\n            (Dict.fromList  -- Params\n                [ ( \"->0\", Input 0 )\n                , ( \"awesomeness\", Value 100.0 )\n                , ( \"0->\", Output 0 )\n                ])\n            id -- ID\n\n","type":"String.String -> Dict.Dict String.String AudioGraph.Node.Param -> AudioGraph.Node.ID -> AudioGraph.Node.Node"},{"name":"createGainNode","comment":" ","type":"AudioGraph.Node.ID -> AudioGraph.Node.Node"},{"name":"createOscillatorNode","comment":" ","type":"AudioGraph.Node.ID -> AudioGraph.Node.Node"},{"name":"desintationNode","comment":" ","type":"AudioGraph.Node.Node"},{"name":"getID","comment":" ","type":"AudioGraph.Node.Node -> AudioGraph.Node.ID"},{"name":"getParam","comment":" ","type":"String.String -> AudioGraph.Node.Node -> Maybe.Maybe AudioGraph.Node.Param"},{"name":"getType","comment":" ","type":"AudioGraph.Node.Node -> AudioGraph.Node.Type"},{"name":"idFromInt","comment":" ","type":"Basics.Int -> AudioGraph.Node.ID"},{"name":"idFromString","comment":" ","type":"String.String -> AudioGraph.Node.ID"},{"name":"idToString","comment":" ","type":"AudioGraph.Node.ID -> String.String"},{"name":"setParam","comment":" ","type":"String.String -> AudioGraph.Node.Param -> AudioGraph.Node.Node -> AudioGraph.Node.Node"}],"binops":[]},{"name":"AudioGraph.Utils","comment":"\n\n@docs mtof, ftom\n\n","unions":[],"aliases":[],"values":[{"name":"ftom","comment":" ","type":"AudioGraph.Units.Hertz -> AudioGraph.Units.MIDI"},{"name":"mtof","comment":" ","type":"AudioGraph.Units.MIDI -> AudioGraph.Units.Hertz"}],"binops":[]}]